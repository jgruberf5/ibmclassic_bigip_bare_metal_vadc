#!/bin/bash

# Read IP from bond0 (private) and populate BIG-IP netplan YAML to move IP address to bridge with BIG-IP management port
#
# This method uses linux network settings - assumes networking is up
#export PRIVATE_INTERFACE=bond0
#export PRIVATE_IP_ADDRESS=$(ip addr show $PRIVATE_INTERFACE | grep "inet " | awk '{print $2}' | cut -d'/' -f1)
#export PRIVATE_IP_MASK=$(ip addr show $PRIVATE_INTERFACE | grep "inet " | awk '{print $2}' | cut -d'/' -f2)
#export PRIVATE_NEXT_HOP=$(ip route show 10.0.0.0/8 | awk '{print $3}')
#
# This method uses the existing Ubuntu netplan YAML for IBM Classic bare metal servers
# If the default netplan changes, this will need to be adjusted
#
# private ip addres = networks.bonds.bond0.address.0
# private ip next hop = networks.bonds.bond0.routes.0.via
#
export PRIVATE_IP_ADDRESS=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond0"]["addresses"][0])'| cut -d'/' -f1)
export PRIVATE_IP_MASK=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond0"]["addresses"][0])'| cut -d'/' -f2)
export PRIVATE_NEXT_HOP=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond0"]["routes"][0]["via"])')

# Read IP from bond1 (public) and populate BIG-IP netplan YAML
#
# This method uses linux network settings - assumes networking is up
#export PUBLIC_INTERFACE=bond1
#export PUBLIC_IP_ADDRESS=$(ip addr show $PUBLIC_INTERFACE | grep "inet " | awk '{print $2}' | cut -d'/' -f1)
#export PUBLIC_IP_MASK=$(ip addr show $PUBLIC_INTERFACE | grep "inet " | awk '{print $2}' | cut -d'/' -f2)
#export PUBLIC_NEXT_HOP=$(ip route show default | awk '{print $3}')
#
# This method uses the existing Ubuntu netplan YAML for IBM Classic bare metal servers
# If the default netplan changes, this will need to be adjusted
#
# public ip addres = networks.bonds.bond1.address.0
# public ip next hop = networks.bonds.bond1.gateway4
#
export PUBLIC_IP_ADDRESS=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond1"]["addresses"][0])' | cut -d'/' -f1)
export PUBLIC_IP_MASK=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond1"]["addresses"][0])' | cut -d'/' -f2)
export PUBLIC_NEXT_HOP=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond1"]["gateway4"])')
#
# Read DNS server for private DNS servers
#
# This method uses what is statically set in the linux resolver config - assumes netplan has created the config
#export DNS_1=$(cat /etc/resolv.conf | grep -m 1 nameserver | awk '{ print $2 }')
#export DNS_2=$(cat /etc/resolv.conf | grep -m 2 nameserver | tail -n1 | awk '{ print $2 }')
#
# This method uses the existing Ubuntu netplan YAML for IBM Classic bare metal servers
# If the default netplan changes, this will need to be adjusted
#
export DNS_1=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond0"]["nameservers"]["addresses"][0])')
export DNS_2=$(cat /etc/netplan/01-netcfg.yaml | python3 -c 'import json, sys, yaml ; y = yaml.safe_load(sys.stdin.read()) ; print(y["network"]["bonds"]["bond0"]["nameservers"]["addresses"][1])')
#
# Read SSH key added to bare metal server and add to BIG-IP virtual edition
#
export SSH_AUTH_KEY=$(cat /root/.ssh/authorized_keys | grep -Ev "^#|^$")
#
# Download the BIG-IP virtual edition disk image from VPC image object store
#
export BIGIP_IMAGE_DOWNLOAD_PATH='https://s3.us-east.cloud-object-storage.appdomain.cloud/f5-adc-bigip-17.5.0-0.0.15.all-1slot-031025001-us-east'
export BIGIP_IMAGE_DOWNLOAD_IMAGE_NAME='BIGIP-17.5.0-0.0.15.ALL_1SLOT-031025001.qcow2'
#
#
#
export BIGIP_CLOUDINIT_ISO=/opt/F5Networks/onboarding/BIGIP_USER_DATA.iso
export BIGIP_INSTANCE_ID=bigipinstance1
export BIGIP_HOSTNAME=bigip1
export BIGIP_VM_NAME=BIG-IP-17-5
export BIGIP_VM_MEMORY=4194304
export BIGIP_VM_VCPUS=2
export BIGIP_SSH_AUTH_KEY=$SSH_AUTH_KEY
#
# You can set this manually if you know the additional private network subnet address allocated
# Manually set management addresses will ARP respond on the management bridge (L2)
#
# export BIGIP_MANAGEMENT_IP=10.120.92.159/26
# export BIGIP_MANAGEMENT_NEXT_HOP=$PRIVATE_NEXT_HOP
#
# You can use an IPv4 link local loopack baddress which can be the same for all instances 
# This will depend on the linux host routing to the BIG-IP virtual edition management
# through the management bridge (L3)
#
export BIGIP_MANAGEMENT_IP=169.254.254.2/16
export HOST_LINK_LOCAL_MANAGEMENT_IP=169.254.254.1/16
export BIGIP_MANAGEMENT_NEXT_HOP=$HOST_LINK_LOCAL_MANAGEMENT_IP

export BIGIP_MANAGEMENT_MTU=1460
export TMOS_ADMIN_PASSWORD='F5Networks!'
